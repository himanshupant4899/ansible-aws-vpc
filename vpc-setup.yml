- hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Import VPC variables
      include_vars: vars/vpc_setup

    - name: Create vprofile VPC
      ec2_vpc_net:
        name: "{{vpc_name}}"
        cidr_block: "{{vpcCidr}}"
        region: "{{region}}"
        state: "{{state}}"
        tenancy: default
        dns_hostnames: yes
        dns_support: yes
      register: vpcout

 #   - debug:
 #       var: vpcout

    - name: create public subnet in Zone1
      ec2_vpc_subnet:
        state: "{{state}}"
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone1}}"
        cidr: "{{PubSub1Cidr}}"
        map_public: yes
        tags:
          Name: vprofile-pubsub1
      register: pubsub1_out

    - name: create public subnet in Zone2
      ec2_vpc_subnet:
        state: "{{state}}"
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone2}}"
        cidr: "{{PubSub2Cidr}}"
        map_public: yes
        tags:
          Name: vprofile-pubsub2
      register: pubsub2_out

    - name: create public subnet in Zone3
      ec2_vpc_subnet:
        state: "{{state}}"
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone3}}"
        cidr: "{{PubSub3Cidr}}"
        map_public: yes
        tags:
          Name: vprofile-pubsub3
      register: pubsub3_out

    - name: create private subnet in Zone1
      ec2_vpc_subnet:
        state: "{{state}}"
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone1}}"
        cidr: "{{PrivSub1Cidr}}"
        map_public: yes
        tags:
          Name: vprofile-privsub1
      register: privsub1_out

    - name: create private subnet in Zone2
      ec2_vpc_subnet:
        state: "{{state}}"
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone2}}"
        cidr: "{{PrivSub2Cidr}}"
        map_public: yes
        tags:
          Name: vprofile-privsub2
      register: privsub2_out

    - name: create private subnet in Zone3
      ec2_vpc_subnet:
        state: "{{state}}"
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone3}}"
        cidr: "{{PrivSub3Cidr}}"
        map_public: yes
        tags:
          Name: vprofile-privsub3
      register: privsub3_out

    - name: create internet gateway
      ec2_vpc_igw:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        state: "{{state}}"
        resource_tags:
          Name: "vprofile_IGW"
      register: igw_out

    - name: Set up public subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        tags:
          Name: Vprofile-Public
        subnets:
          - "{{ pubsub1_out.subnet.id }}"
          - "{{ pubsub2_out.subnet.id }}"
          - "{{ pubsub3_out.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_out.gateway_id }}"
      register: pubRT_out

    - name: Create new nat gateway, using an EIP address  and wait for available status.
      ec2_vpc_nat_gateway:
        state: "{{state}}"
        subnet_id: "{{ pubsub1_out.subnet.id }}"
        wait: yes
        region: "{{region}}"
        if_exist_do_not_create: yes
      register: NATGW_out

    - name: Set up private subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        tags:
          Name: Vprofile-Private
        subnets:
          - "{{ privsub1_out.subnet.id }}"
          - "{{ privsub2_out.subnet.id }}"
          - "{{ privsub3_out.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ NATGW_out.nat_gateway_id }}"
      register: privRT_out

    - debug:
        var: "{{item}}"
      loop:
        - vpcout.vpc.id
        - pubsub1_out.subnet.id
        - pubsub2_out.subnet.id
        - pubsub3_out.subnet.id
        - privsub1_out.subnet.id
        - privsub2_out.subnet.id
        - privsub3_out.subnet.id
        - igw_out.gateway_id
        - NATGW_out.nat_gateway_id
        - pubRT_out.route_table.id
        - privRT_out.route_table.id

    - name: Setting host facts using key=value pairs, this format can only create strings or booleans
      set_fact:
        vpcid: "{{vpcout.vpc.id}}"
        pubsub1id: "{{pubsub1_out.subnet.id}}"
        pubsub2id: "{{pubsub2_out.subnet.id}}"
        pubsub3id: "{{pubsub3_out.subnet.id}}"
        privsub1id: "{{privsub1_out.subnet.id}}"
        privsub2id: "{{privsub2_out.subnet.id}}"
        privsub3id: "{{privsub3_out.subnet.id}}"
        igwid: "{{igw_out.gateway_id}}"
        pubRTid: "{{pubRT_out.route_table.id}}"
        privRTid: "{{privRT_out.route_table.id}}"
        NATGWid: "{{NATGW_out.nat_gateway_id}}"
        cacheable: yes

    - name: copy variables to a file for vpc output
      copy:
        content: "region: {{region}}\nvpcid: {{vpcout.vpc.id}}\npubsub1id: {{pubsub1_out.subnet.id}}\npubsub2id: {{pubsub2_out.subnet.id}}\npubsub3id: {{pubsub3_out.subnet.id}}\nprivsub1id: {{privsub1_out.subnet.id}}\nprivsub2id: {{privsub2_out.subnet.id}}\nprivsub3id: {{privsub3_out.subnet.id}}\nigwid: {{igw_out.gateway_id}}\npubRTid: {{pubRT_out.route_table.id}}\nprivRTid: {{privRT_out.route_table.id}}\nNATGWid: {{NATGW_out.nat_gateway_id}}"
        dest: vars/output_vars


